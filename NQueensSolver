public class NQueensSolver {
    private int[] queens;
    private int size;

    public NQueensSolver(int size) {
        this.size = size;
        this.queens = new int[size];
    }

    public void solve() {
        if (placeQueen(0)) {
            printSolution();
        } else {
            System.out.println("No solution exists.");
        }
    }

    private boolean placeQueen(int row) {
        if (row == size) {
            return true;
        }
        for (int col = 0; col < size; col++) {
            if (isSafe(row, col)) {
                queens[row] = col;
                if (placeQueen(row + 1)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean isSafe(int row, int col) {
        for (int i = 0; i < row; i++) {
            if (queens[i] == col || queens[i] - i == col - row || queens[i] + i == col + row) {
                return false;
            }
        }
        return true;
    }

    private void printSolution() {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (queens[i] == j) {
                    System.out.print("Q ");
                } else {
                    System.out.print(". ");
                }
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int size = 8; // Change this to any size
        NQueensSolver solver = new NQueensSolver(size);
        solver.solve();
    }
}
